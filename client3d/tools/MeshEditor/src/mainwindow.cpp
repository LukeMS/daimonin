// generated by Fast Light User Interface Designer (fluid) version 1.0106

#include "mainwindow.h"
#include "editor.h"
#include "material.h"
#include "mesh.h"
#include "skeleton.h"

inline void MainWindow::cb_LoadMesh_i(Fl_Button*, void*) {
  Editor::getSingleton().loadModel();
}
void MainWindow::cb_LoadMesh(Fl_Button* o, void* v) {
  ((MainWindow*)(o->parent()->parent()->user_data()))->cb_LoadMesh_i(o,v);
}

inline void MainWindow::cb_selMeshSpecies_i(Fl_Choice* o, void*) {
  Mesh::getSingleton().selectSpecies(o->value());
}
void MainWindow::cb_selMeshSpecies(Fl_Choice* o, void* v) {
  ((MainWindow*)(o->parent()->parent()->user_data()))->cb_selMeshSpecies_i(o,v);
}

inline void MainWindow::cb_butRenameMesh_i(Fl_Button*, void*) {
  Mesh::getSingleton().renameMesh();
}
void MainWindow::cb_butRenameMesh(Fl_Button* o, void* v) {
  ((MainWindow*)(o->parent()->parent()->user_data()))->cb_butRenameMesh_i(o,v);
}

inline void MainWindow::cb_selAnimName_i(Fl_Choice* o, void*) {
  Skeleton::getSingleton().selAnimation(o->value());
}
void MainWindow::cb_selAnimName(Fl_Choice* o, void* v) {
  ((MainWindow*)(o->parent()->parent()->user_data()))->cb_selAnimName_i(o,v);
}

inline void MainWindow::cb_countAnimLength_i(Fl_Counter*, void*) {
  Skeleton::getSingleton().updateAnimLength();
}
void MainWindow::cb_countAnimLength(Fl_Counter* o, void* v) {
  ((MainWindow*)(o->parent()->parent()->user_data()))->cb_countAnimLength_i(o,v);
}

inline void MainWindow::cb_butSaveAnim_i(Fl_Button*, void*) {
  Skeleton::getSingleton().changeAnimLength();
}
void MainWindow::cb_butSaveAnim(Fl_Button* o, void* v) {
  ((MainWindow*)(o->parent()->parent()->user_data()))->cb_butSaveAnim_i(o,v);
}

inline void MainWindow::cb_butRenameAnim_i(Fl_Button*, void*) {
  Skeleton::getSingleton().renameAnim();
}
void MainWindow::cb_butRenameAnim(Fl_Button* o, void* v) {
  ((MainWindow*)(o->parent()->parent()->user_data()))->cb_butRenameAnim_i(o,v);
}

inline void MainWindow::cb_butRenameMaterial_i(Fl_Button*, void*) {
  Material::getSingleton().renameMaterial();
}
void MainWindow::cb_butRenameMaterial(Fl_Button* o, void* v) {
  ((MainWindow*)(o->parent()->parent()->user_data()))->cb_butRenameMaterial_i(o,v);
}

inline void MainWindow::cb_countScaleModel_i(Fl_Counter*, void*) {
  Editor::getSingleton().updateModelScale();
}
void MainWindow::cb_countScaleModel(Fl_Counter* o, void* v) {
  ((MainWindow*)(o->parent()->parent()->user_data()))->cb_countScaleModel_i(o,v);
}

inline void MainWindow::cb_butScaleModel_i(Fl_Button*, void*) {
  Editor::getSingleton().scaleModel();
}
void MainWindow::cb_butScaleModel(Fl_Button* o, void* v) {
  ((MainWindow*)(o->parent()->parent()->user_data()))->cb_butScaleModel_i(o,v);
}

MainWindow::~MainWindow() {
}

MainWindow::MainWindow() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = MWindow = new Fl_Double_Window(564, 743, "Daimonin (Ogre3d Mesh Editor) - Powered by FLTK");
    w = o;
    o->box(FL_THIN_UP_BOX);
    o->user_data((void*)(this));
    o->align(FL_ALIGN_CENTER);
    { Fl_Group* o = MeshNamePanel = new Fl_Group(10, 15, 540, 230, "Files");
      o->box(FL_SHADOW_BOX);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { Fl_Button* o = LoadMesh = new Fl_Button(20, 40, 80, 25, "Mesh File:");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->callback((Fl_Callback*)cb_LoadMesh);
        o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
      }
      { Fl_Output* o = MeshName = new Fl_Output(100, 40, 440, 25);
        o->align(FL_ALIGN_CENTER);
        o->value("<- Click here to load a new mesh");
      }
      { Fl_Output* o = SkeletonName = new Fl_Output(100, 70, 440, 25, "Skeleton:");
        o->labeltype(FL_EMBOSSED_LABEL);
      }
      { Fl_Box* o = new Fl_Box(25, 125, 515, 25, "Rename Mesh Name");
        o->labeltype(FL_EMBOSSED_LABEL);
      }
      { Fl_Output* o = txtMeshNameStatus = new Fl_Output(100, 100, 440, 25, "Status:");
        o->color((Fl_Color)48);
        o->labeltype(FL_EMBOSSED_LABEL);
      }
      { Fl_Choice* o = selMeshSpecies = new Fl_Choice(100, 150, 280, 25, "Species:");
        o->down_box(FL_BORDER_BOX);
        o->labeltype(FL_EMBOSSED_LABEL);
        o->callback((Fl_Callback*)cb_selMeshSpecies);
      }
      { Fl_Choice* o = selMeshGender = new Fl_Choice(100, 180, 280, 25, "Gender:");
        o->down_box(FL_BORDER_BOX);
        o->labeltype(FL_EMBOSSED_LABEL);
      }
      { Fl_Choice* o = selMeshProfession = new Fl_Choice(100, 210, 280, 25, "Profession:");
        o->down_box(FL_BORDER_BOX);
        o->labeltype(FL_EMBOSSED_LABEL);
      }
      { Fl_Button* o = butRenameMesh = new Fl_Button(390, 150, 145, 85, "Save Mesh");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->callback((Fl_Callback*)cb_butRenameMesh);
      }
      o->end();
    }
    { Fl_Group* o = panelNewAnimName = new Fl_Group(10, 520, 540, 175, "Animation");
      o->box(FL_SHADOW_BOX);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { Fl_Choice* o = selAnimName = new Fl_Choice(70, 545, 465, 25, "Name:");
        o->down_box(FL_BORDER_BOX);
        o->labeltype(FL_EMBOSSED_LABEL);
        o->callback((Fl_Callback*)cb_selAnimName);
      }
      { Fl_Counter* o = countAnimLength = new Fl_Counter(125, 575, 135, 25);
        o->labeltype(FL_EMBOSSED_LABEL);
        o->minimum(0.1);
        o->maximum(100);
        o->step(0.01);
        o->value(1);
        o->callback((Fl_Callback*)cb_countAnimLength);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Output* o = txtAnimNameStatus = new Fl_Output(70, 605, 465, 25, "Status:");
        o->color((Fl_Color)48);
        o->labeltype(FL_EMBOSSED_LABEL);
      }
      { Fl_Output* o = outAnimLen = new Fl_Output(70, 575, 50, 25, "Length:");
        o->color((Fl_Color)48);
        o->labeltype(FL_EMBOSSED_LABEL);
      }
      { Fl_Output* o = outAnimNewLen = new Fl_Output(265, 575, 50, 25);
        o->color((Fl_Color)48);
        o->labeltype(FL_EMBOSSED_LABEL);
      }
      { Fl_Choice* o = selRenameAnim = new Fl_Choice(165, 660, 370, 25);
        o->down_box(FL_BORDER_BOX);
        o->labeltype(FL_EMBOSSED_LABEL);
      }
      { Fl_Button* o = butSaveAnim = new Fl_Button(320, 575, 215, 25, "Save New Length");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->callback((Fl_Callback*)cb_butSaveAnim);
      }
      { Fl_Button* o = butRenameAnim = new Fl_Button(20, 660, 145, 25, "Rename Animation");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->callback((Fl_Callback*)cb_butRenameAnim);
      }
      { Fl_Box* o = new Fl_Box(20, 635, 515, 25, "Rename Animation Name");
        o->labeltype(FL_EMBOSSED_LABEL);
      }
      o->end();
    }
    { Fl_Group* o = panelMaterial = new Fl_Group(10, 360, 540, 150, "Material");
      o->box(FL_SHADOW_BOX);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { Fl_Choice* o = selMaterialName = new Fl_Choice(70, 385, 465, 25, "Name:");
        o->down_box(FL_BORDER_BOX);
        o->labeltype(FL_EMBOSSED_LABEL);
      }
      { Fl_Output* o = txtMaterialNameStatus = new Fl_Output(70, 415, 465, 25, "Status:");
        o->color((Fl_Color)48);
        o->labeltype(FL_EMBOSSED_LABEL);
      }
      { Fl_Choice* o = selRenameMaterial = new Fl_Choice(165, 470, 370, 30);
        o->down_box(FL_BORDER_BOX);
        o->labeltype(FL_EMBOSSED_LABEL);
      }
      { Fl_Button* o = butRenameMaterial = new Fl_Button(20, 470, 145, 30, "Rename Material");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->callback((Fl_Callback*)cb_butRenameMaterial);
      }
      { Fl_Box* o = new Fl_Box(20, 445, 515, 25, "Rename Material Name");
        o->labeltype(FL_EMBOSSED_LABEL);
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(10, 705, 540, 25);
      o->box(FL_SHADOW_BOX);
      o->labeltype(FL_NO_LABEL);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { Fl_Box* o = new Fl_Box(15, 705, 530, 25, "(c) 2005 The Daimonin Team (http://daimonin.sourceforge.net)");
        o->labeltype(FL_ENGRAVED_LABEL);
      }
      o->end();
    }
    { Fl_Group* o = panelScaleModel = new Fl_Group(10, 255, 540, 95, "Scale Model");
      o->box(FL_SHADOW_BOX);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { Fl_Counter* o = countScaleModel = new Fl_Counter(70, 280, 245, 25, "Scale:");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->minimum(0.1);
        o->maximum(100);
        o->step(0.01);
        o->value(1);
        o->callback((Fl_Callback*)cb_countScaleModel);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Output* o = txtScaleModelStatus = new Fl_Output(70, 310, 465, 25, "Status:");
        o->color((Fl_Color)48);
        o->labeltype(FL_EMBOSSED_LABEL);
      }
      { Fl_Button* o = butScaleModel = new Fl_Button(320, 280, 215, 25, "Save New Size");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->callback((Fl_Callback*)cb_butScaleModel);
      }
      o->end();
    }
    o->end();
  }
}
