/*-----------------------------------------------------------------------------
This source file is part of Daimonin's 3d-Client
Daimonin is a MMORG. Details can be found at http://daimonin.sourceforge.net
Copyright (c) 2005 Andreas Seidel

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

In addition, as a special exception, the copyright holder of client3d give
you permission to combine the client3d program with lgpl libraries of your
choice. You may copy and distribute such a system following the terms of the
GNU GPL for 3d-Client and the licenses of the other code concerned.

You should have received a copy of the GNU General Public License along with
this program; If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------*/
//================================================================================================
// Every Shader program MUST have a fp20 fallback version.
// Some of the fp20 limitations are:
// - Only 4 Texture Units can be used.
// - The TEXCOORD's can only access their related TEXTURE_UNIT.
//   (So even if all 4 TEXCOORD's refer to a single atlastexture, all 4 TU's must be defined)
// - The TEXCOORD's can only hold a float2 datatype.
//================================================================================================

//================================================================================================
// Vertex Program (Land Lod 0)
//================================================================================================
void MainVP_Land_Lod0(
    float4 inPos : POSITION,
    float2 inTex0: TEXCOORD0, // Ground Layer 0
    float2 inTex1: TEXCOORD1, // Ground Layer 1
    float2 inTex2: TEXCOORD2, // Ground Layer 2
    float2 inMask: TEXCOORD3, // Mask,  Grid Layer
    float4 params: COLOR0,    // Faked shadow, Daylight Level
    out float4 outPos : POSITION,
    out float2 outTex0: TEXCOORD0,
    out float2 outTex1: TEXCOORD1,
    out float2 outTex2: TEXCOORD2,
    out float2 outMask: TEXCOORD3,
    out float4 outPara: COLOR0,
    uniform float3   para, // Daylight Level, Grid
    uniform float4x4 worldViewProj)
{
    outPos  = mul(worldViewProj, inPos);
    outTex0 = inTex0;
    outTex1 = inTex1;
    outTex2 = inTex2;
    outMask = inMask;
    outPara.rg= para.rg;  // Daylight Level, Grid
    outPara.b = params.w; // Spotlight
    outPara.a = params.x; // Faked shadow.
}
//================================================================================================
// Fragment Program (Land Lod 0)
//================================================================================================
float4 MainFP_Land_Lod0(
    float2 tex0: TEXCOORD0,
    float2 tex1: TEXCOORD1,
    float2 tex2: TEXCOORD2,
    float2 mask: TEXCOORD3,
    float4 para: COLOR0, // r=daylight(float), g=Grid(bool), b=Spotlight(bool), a=fakedShadow(float)
    uniform sampler2D texture0,
    uniform sampler2D texture1,
    uniform sampler2D texture2,
    uniform sampler2D texture3) : COLOR
{
    float4 maskColor =  tex2D(texture3, mask);               // Mask + Grid Layer
    float4 color     =  tex2D(texture0, tex0);               // Ground Layer 0
    color = lerp(color, tex2D(texture1, tex1), maskColor.r); // Ground Layer 1
    color = lerp(color, tex2D(texture2, tex2), maskColor.g); // Ground Layer 2
    color*= max(para.g, maskColor.b) * para.a;               // Grid + Faked shadow
    color*= max(para.r, para.b * maskColor.a);               // Daylight + Spotlight
    return color;
}
//================================================================================================
// Fragment Program (Land Lod 1)
//================================================================================================
float4 MainFP_Land_Lod1(
    float2 tex0: TEXCOORD0,
    float2 tex1: TEXCOORD1,
    float2 tex2: TEXCOORD2,
    float2 mask: TEXCOORD3,
    float4 para: COLOR0, // r=daylight(float), g=Grid(bool), b=Spotlight(bool), a=fakedShadow(float)
    uniform sampler2D texture0,
    uniform sampler2D texture1,
    uniform sampler2D texture2,
    uniform sampler2D texture3) : COLOR
{
    float4 maskColor =  tex2D(texture3, mask);
    float4 color     =  tex2D(texture0, tex0);                // Ground Layer 0
    color = lerp(color, tex2D(texture1, tex1), maskColor.r);  // Ground Layer 1
    color = lerp(color, tex2D(texture2, tex2), maskColor.g);  // Ground Layer 2
    color*= para.r * para.a * saturate(para.g +maskColor.b);  // Daylight + Faked shadow + Grid
    color+= float4(para.b,para.b,para.b, 1.0f) *maskColor.a/4; // Spotlight
    return color;
}


//================================================================================================
// Vertex Program (Water Lod 0)
//================================================================================================
float2 MainVP_Water_Lod0(
    float4 inPos : POSITION,
    float2 inTex0: TEXCOORD0,
    out float4 outPos : POSITION,
    out float2 outTex0: TEXCOORD0,
    uniform float4 para,  // r=daylight, g=alpha, b=wave-height, a=wave-speed
    uniform float Time,
    uniform float4x4 worldViewProj) : COLOR
{
    inPos.y+= sin(sin(inPos.x*16.0f) + cos(inPos.z*16.0f) + Time * para.a)*para.b;
    outPos  = mul(worldViewProj, inPos);
    outTex0 = inTex0;
    return para.rg;
}
//================================================================================================
// Fragment Program (Water Lod 0)
//================================================================================================
float4 MainFP_Water_Lod0(
    float2 tex0: TEXCOORD0,
    float2 para: COLOR0, // r=daylight, g=alpha
    uniform sampler2D texture0) : COLOR
{
    float4 color = tex2D(texture0, tex0);
    color *= para.r; // daylight
    color.a= para.g; // alpha
    return color;
}


//================================================================================================
// Vertex Program (Sprite)
// The sprite always faces the camera.
//================================================================================================
void MainVP_Sprite(
    float4 position : POSITION,
    float2 uv       : TEXCOORD0,
    out float4 oPosition: POSITION,
    out float2 oUV      : TEXCOORD0,
    //uniform float4 cameraPos,
    uniform float4x4 worldMatrix,
    uniform float4x4 viewProjMatrix)
{
    const float  SIZE = 20.0f;
    const float3 UP_VECTOR = /*normalize*/(float3(0.0f, 1.0f, 0.0f));

    float3 eyeVector = viewProjMatrix[2].xyz;
    float3 sideVector= /*normalize*/(cross(eyeVector, UP_VECTOR));
    float4 center = mul(worldMatrix, position);
    center.xyz += (uv.x-0.5f)*sideVector * SIZE;
    center.y -= uv.y * SIZE - 2.0f; // center.xyz -= uv.y *UP_VECTOR * SIZE;
    oPosition = mul(viewProjMatrix, center);
    oUV= uv;
}
//================================================================================================
// Fragment Program (Sprite)
//================================================================================================
float4 MainFP_Sprite(float2 tex0 : TEXCOORD0, uniform sampler2D texture0) : COLOR
{
    return tex2D(texture0, tex0);
}


//================================================================================================
// Vertex Program (waving grass)
//================================================================================================
void MainVP_GrassWaving(
    float4 inPos     : POSITION,
    float2 inUV      : TEXCOORD0,
    float2 wave      : COLOR0,
    out float  outDaylight,
    out float4 outPos: POSITION,
    out float2 outUV : TEXCOORD0,
    uniform float Time,
    uniform float4 para,  // r=daylight, g=alpha, b=amplitude, a=speed
    uniform float4x4 worldViewProj)
{
    inPos.x+=  wave.x * sin(Time * para.a)*para.b;
    inPos.z+=  wave.y * sin(Time * para.a)*para.b;
    outPos = mul(worldViewProj, inPos);
    outUV  = inUV;
    outDaylight = para.r;
}
//================================================================================================
// Fragment Program (waving grass)
//================================================================================================
float4 MainFP_GrassWaving(float daylight, float2 tex0 : TEXCOORD0, uniform sampler2D texture0) : COLOR
{
    float4 color = tex2D(texture0, tex0);
    //color.rgb*= daylight;
    return color;
}


//================================================================================================
// Vertex Program (Vertexselection)
//================================================================================================
void MainVP_VSelection(
    float4 inPos : POSITION,
    out float4 outPos : POSITION,
    out float4 outDark: COLOR0,
    uniform float4x4 worldViewProj)
{
    outDark = float4(inPos.x/4.0f, inPos.y/4.0f, inPos.z/4, 1.0f);
    outPos = mul(worldViewProj, inPos);
}
//================================================================================================
// Fragment Program (Vertexselection)
//================================================================================================
float4 MainFP_VSelection(float4 color : COLOR0) : COLOR
{
    return color;
}
