OCdnl Process this file with autoconf to produce a configure script.

AC_INIT(info)

dnl AC_PPREFIX_DEFAULT(./../..)

dnl we want a config.h file instead of -D options.
AC_CONFIG_HEADER(../../src/include/autoconf.h)
AC_CONFIG_AUX_DIR(make_utils)

dnl Checks for programs.
dnl AC_PROG_YACC
AC_CANONICAL_SYSTEM
AC_PROG_CC

LUA_NUMBER=""
case "$target" in
  alpha-dec-osf*)
    # If we are not using gcc, we want the ansi version of cc.
    if test -z "$GCC"; then
#      CFLAGS="$CFLAGS -std1 -warnprotos" # Not yet ready for warnprotos...
      CFLAGS="$CFLAGS -std1"
    fi
    ;;
  i586-* | i686-* | x86_64* )
    # We can optimize the lua library somewhat on Pentium class processors
    echo "Enabling Lua Pentium optimizations"
    LUA_NUMBER="-DLUA_USER_H='\"../etc/luser_number.h\"' -DUSE_FASTROUND"
    ;;
  *)
    ;;
esac
AC_SUBST([LUA_NUMBER])

SERVER_SYSTEM_SRCS="daemon.c"
COMMON_SYSTEM_SRCS=""
PLUGIN_SYSTEM_SRCS=""
INSTALL_SYSTEM_PARAMS=""
case "$target" in
    *-mingw32 | *-cygwin )
        echo "Win32 build detected"
        CFLAGS="$CFLAGS -DMINGW"
        LIBS="$LIBS -lwsock32"
        COMMON_SYSTEM_SRCS="win32.c"
        PLUGIN_SYSTEM_SRCS="../porting/win32.c"
        SERVER_SYSTEM_SRCS=""
        INSTALL_SYSTEM_PARAMS="daimonin_server.exe plugin_lua.dll"
        ;;
esac
AC_SUBST(SERVER_SYSTEM_SRCS)
AC_SUBST(COMMON_SYSTEM_SRCS)
AC_SUBST(PLUGIN_SYSTEM_SRCS)
AC_SUBST(INSTALL_SYSTEM_PARAMS)

AC_PROG_CPP
AC_PROG_AWK
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB

AC_ARG_ENABLE(old-layout, [  --enable-old-layout    Use the old (0.95.3 and earlier) install layout],
	old_layout=yes, old_layout=no)

dnl Our lexer isn't compatible with lex. We _require_ flex
AC_PATH_PROG(FLEX, flex)
if test -z "$FLEX" ; then
    AC_ERROR([flex is not installed. It is required to build from source.])
fi
if ! `echo $FLEX | grep -q flex` || ! `$FLEX --version | grep -q flex`; then
    AC_ERROR("I wanted flex but got $FLEX. Flex is require to build from source.")
fi

dnl check for some other programs
AC_PATH_PROG(MKDIR, mkdir)
AC_PATH_PROG(TAR, tar)
AC_PATH_PROG(DEPEND, makedepend)
AC_PATH_PROG(CP, cp)
AC_PATH_PROG(BASENAME, basename)
AC_PATH_PROG(SED, sed)
AC_PATH_PROG(RM, rm)
AC_PATH_PROG(AR, ar)
AC_PATH_PROG(PERL, perl)
AC_PATH_PROG(STRIP, strip)

AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(void *)

AC_PATH_PROGS(BOURNE_SHELL, sh ksh bash)

dnl nsl, socket may be needed for the X-windowing system, so check
dnl for them before before checking for X.

AC_CHECK_LIB(nsl, main)
AC_CHECK_LIB(socket, main)

dnl Note. X11 checks removed 2006-02-21 -- Gecko

dnl Allow building with the faster hash functions
CHECK_LIBS=""
AC_ARG_ENABLE(unredistributable-features, [  --enable-unredistributable-features (default no) ],
        AC_DEFINE(NO_REDISTRIBUTION)
        AC_WARN([Unredistributable features enabled. Your binary will be faster but _must not_ be redistributed.])
        )

dnl Enable/disable debugging (currently only asserts)
CHECK_LIBS=""
AC_ARG_ENABLE(debugging, [  --enable-debugging (default no) ],
        ,
        AC_DEFINE(NDEBUG)
        )

dnl This double test for check is a bit wasteful, but its the easiest way =)
CHECK_LIBS=""
AC_ARG_ENABLE(tests, [  --enable-tests       build unit tests (default no) ],
        AC_DEFINE(BUILD_UNIT_TESTS)
        AC_CHECK_LIB(check, tcase_create,
            AC_DEFINE(HAVE_CHECK) 
            CHECK_LIBS="-lcheck" , 
            AC_ERROR([The check framework (http://check.sf.net) is required for unit tests])))

AC_ARG_ENABLE(benchmarks, [  --enable-benchmarks       build benchmarks (default no) ],
        AC_DEFINE(BUILD_BENCHMARKS)
        AC_CHECK_LIB(check, tcase_create,
            AC_DEFINE(HAVE_CHECK) 
            CHECK_LIBS="-lcheck" , 
            AC_ERROR([The check framework (http://check.sf.net) is required for unit tests])))
AC_SUBST(CHECK_LIBS)    

AC_CHECK_LIB(m, main)

dnl Misc libraries.
AC_CHECK_LIB(crypt, main)
AC_CHECK_LIB(des, des_crypt)

dnl Gros - Changed this to support some external programs that do not like dmalloc (like Python).
dnl If you really need to make some memory debugging, uncomment the dmalloc line and comment out the dmalloclp one.

AC_CHECK_LIB(dmalloclp, main)
dnl AC_CHECK_LIB(dmalloc, main)

dnl Gros - Support for the dynamic loader library
AC_CHECK_LIB(dl, main)

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h malloc.h strings.h sys/file.h sys/ioctl.h sys/time.h time.h unistd.h stddef.h stdlib.h sys/ttycom.h sys/termios.h crypt.h arpa/inet.h des.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM
AC_TYPE_UID_T

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_FUNC_SETPGRP
AC_TYPE_SIGNAL
AC_FUNC_STRFTIME
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(gettimeofday mkdir mktime rmdir select socket strcspn strerror strspn strstr strtol strcasecmp strncasecmp stricmp strnicmp snprintf setsid srandom getdtablesize srand48 srand sysconf scandir getaddrinfo)

AC_MSG_CHECKING(how many args gettimeofday uses)
AC_CACHE_VAL(ac_cv_gettimeofday_args,
 [AC_TRY_COMPILE([#include <sys/time.h>
	#include <unistd.h>],
	[struct timeval tv;
	gettimeofday(&tv, 0);],
	[ac_gettimeofday_args=2],
	[AC_TRY_COMPILE([#include <sys/time.h>
		#include <unistd.h>],
		[struct timeval tv; gettimeofday(&tv);],
		[ac_gettimeofday_args=1],
		[ac_gettimeofday_args=0])])
  ac_cv_gettimeofday_args=$ac_gettimeofday_args])

ac_gettimeofday_args=$ac_cv_gettimeofday_args
if test $ac_gettimeofday_args = 1 ; then
  AC_DEFINE(HAVE_GETTIMEOFDAY)
  AC_MSG_RESULT(one argument)
elif test $ac_gettimeofday_args = 2 ; then
  AC_DEFINE(HAVE_GETTIMEOFDAY)
  AC_DEFINE(GETTIMEOFDAY_TWO_ARGS)
  AC_MSG_RESULT(two arguments)
else
  AC_MSG_RESULT(unknown)
fi

AC_SUBST(PERL)
AC_SUBST(EXTRA_CFLAGS)

dnl Do the evals because most of these are made up of sub variables and
dnl we don't want the include to have something like
dnl #define DATADIR "${prefix}/somedir"

dnl hack to set prefix - the AC_OUTPUT does this, but that is too late
dnl for our purposes here.
test "x$prefix" = xNONE && prefix=$ac_default_prefix
test "x$exec_prefix" = xNONE && exec_prefix='${prefix}'

nprefix=`eval echo ${prefix}`

ndatadir=`eval echo ${datadir}`/Daimonin
nlocaldir=`eval echo ${localstatedir}`/Daimonin


dnl Have to do this one twice, since it uses two levels of indirection

nlibdir=`eval echo ${libdir}`
nlibdir=`eval echo ${nlibdir}`

AC_DEFINE_UNQUOTED(LIBDIR, "./lib")
AC_DEFINE_UNQUOTED(PREFIXDIR, "${nprefix}")
AC_DEFINE_UNQUOTED(DATADIR, "./lib")
AC_DEFINE_UNQUOTED(LOCALDIR, "./data")

datadir=${ndatadir}
localstatedir=${nlocaldir}

AC_OUTPUT(Makefile
	../../src/porting/Makefile
	../../src/socket/Makefile
	../../src/server/Makefile
	../../src/include/Makefile
	../../src/3rdparty/zlib/Makefile
	../../src/tests/Makefile
	../../src/3rdparty/lua/config
	../../src/plugin_lua/Makefile
	)
