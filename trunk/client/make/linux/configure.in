
AC_PREREQ(2.59)

# The package name is used in the client-server handshake and must be exactly
# "Daimonin SDL Client".
AC_INIT([Daimonin SDL Client], [0.10.0], [http://www.daimonin.org])
AC_CONFIG_AUX_DIR(make_utils)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(daimonin, 0.10.0)

AC_CONFIG_SRCDIR(../../src/client.c)

# Enforce explicit use of maintainer tools (=bootstrap)
AM_MAINTAINER_MODE



AC_PROG_CC
AM_PROG_CC_C_O
AC_PROG_MAKE_SET
AC_PROG_INSTALL

AC_ARG_ENABLE(debug,
   [  --enable-debug          compile in debug messages],
   [export USE_DEBUG=yes],
   [export USE_DEBUG=no]
)

# sound config
sound="yes"
AC_ARG_ENABLE(sound,
   AC_HELP_STRING([--enable-sound], [compile with SDL sound (default)]), 
   [sound=$enableval])
if test "x$sound" = "xyes" ; then
	AC_DEFINE(INSTALL_SOUND, 1, [ Use the SDL_mixer sound system. Remove when you have no sound card or slow computer])
fi

# OpenGL config
opengl="no"
AC_ARG_ENABLE(opengl,
   AC_HELP_STRING([--enable-opengl], [compile with OpenGL support (experimental)]), 
   [opengl=$enableval])
if test "x$opengl" = "xyes" ; then
	AC_DEFINE(INSTALL_OPENGL, 1, [Use OpenGL to do the render/blits (experimental)])
fi

# Win32 config (TODO: this should be automatic!)
win32="no"
AC_ARG_ENABLE(win32,
   AC_HELP_STRING([--enable-win32], [compile with Win32 support]), 
   [win32=$enableval])
if test "x$win32" = "xyes" ; then
	AC_DEFINE(__WIN_32, 1, [Win32])
else
	AC_DEFINE(__LINUX, 1, [Linux])
fi

# IPv6 support (buggy on some distros. See Mantis issue #0000425)
AC_ARG_ENABLE(getaddrinfo,
   AC_HELP_STRING([--enable-getaddrinfo], [compile with getaddrinfo() (IPv6) Support. See README. ]), 
   [AC_CHECK_FUNCS([getaddrinfo])])
 
# Add an option to produce statically linked binaries.
AC_ARG_ENABLE([static],
               AC_HELP_STRING([--enable-static],
                              [build static binary (default=no)]),
               [static=$enableval],
               [static=no])

# Check whether user supplied the option to statically link binaries.
SDL_STATIC="--libs"
if test "$static" = yes; then
        # if we're using gcc, add `-static' to LDFLAGS
        if test -n "$GCC" || test "$ac_cv_prog_gcc" = "yes"; then
                STATIC_LD="-static"
                LDFLAGS="$LDFLAGS -static"
                SDL_STATIC="--static-libs"

                if test -z "$EXTRA_LIBS"; then
                    AC_MSG_WARN([

*** Attempting static linking without EXTRA_LIBS variable.
Due to the difficulties of statically linking SDL_image and SDL_mixer, you
might need to manually supply their respective library dependencies in the 
EXTRA_LIBS environment variable. 

For example (this works for me on a Debian system):
> EXTRA_LIBS="-lvorbisfile -lvorbis -logg -lsmpeg -lstdc++ -lasound -lX11 -lXext -ltiff -ljpeg -lpng -lslang -lz -lncurses -lgpm -lm" ./configure --enable-static

Running "ldd" on a dynamically linked daimonin binary might show you most of the needed libraries. 

Make sure you have static versions of all the needed libraries. If configure still fails in the SDL_image or SDL_mixer tests, some hints can be gathered from 
> grep -C2 "undefined reference" config.log

Finally, the order of the libraries in EXTRA_LIBS is relevant. More "basic" libraries should be last (like -lm).
])
                    EXTRA_LIBS="-lvorbisfile -lvorbis -logg -lsmpeg -lstdc++ -lasound -lX11 -lXext -ltiff -ljpeg -lpng -lslang -lz -lncurses -lgpm -lm"
                fi
        fi
fi

# option to enable simple directory layout 
simplelayout="yes"
AC_ARG_ENABLE(simplelayout, 
	AC_HELP_STRING([--enable-simplelayout],[Install everything under one single directory. (default)]),
	[simplelayout=$enableval])

# Anything having to do with installation directories must be done in the makefile
# (since the paths are not guaranteed to be known by automake, see automake docs for more info)
if test "x$simplelayout" = "xyes"; then
    if test "x$prefix" = xNONE ; then
        prefix="$HOME"
    fi
	# Simple layout (everything under one directory)
	d_bindir="\${prefix}/daimonin-$VERSION"
	d_datadir="\${prefix}/daimonin-$VERSION"
    DIRDEFINES="-DSYSPATH=\"\\\"./\\\"\""
else
	# Unixish layout, files spread out over several directories
	d_bindir='${bindir}'
	d_datadir='${pkgdatadir}'
    DIRDEFINES="-DSYSPATH=\"\\\"${d_datadir}/\\\"\""
fi
CPPFLAGS="${CPPFLAGS} ${DIRDEFINES}"

AC_SUBST(d_bindir)
AC_SUBST(d_datadir)

AC_PATH_PROG(CP,cp)
AC_PATH_PROG(RM,rm)
AC_PATH_PROG(RMDIR,rmdir)
AC_PATH_PROG(MKDIR,mkdir)

#
# SDL_CONFIG ("borrowed" from Wesnoth 0.7.3)
#

AC_PATH_PROGS([SDL_CONFIG], [sdl-config sdl11-config], [none])
if test "x$SDL_CONFIG" = "xnone"; then
	AC_MSG_ERROR([*** SDL not found! Get SDL from www.libsdl.org.
If you already installed it, check it's in the path. If problem remains,
please send a mail to the address that appears in ./configure --version
indicating your platform, the version of configure script and the problem.])
fi

# Check for SDL libs

SDL_LIBS=`$SDL_CONFIG $SDL_STATIC`
OLD_LIBS=$LIBS
LIBS="$LIBS $SDL_LIBS $EXTRA_LIBS"
                
# There's no need for this, $SDL_CONFIG comes with libsdl and
# it doesn't find it in FreeBSD
# AC_CHECK_LIB([SDL], [SDL_Init])

AC_CHECK_LIB([SDL_image],
	     [IMG_Load],
	     [SDL_IMAGE_LIBS="-lSDL_image "],
	     [AC_MSG_ERROR([*** SDL_image lib not found! Get SDL_image from
http://www.libsdl.org/projects/SDL_image/index.html])])

if test "x$sound" = "xyes" ; then
	AC_CHECK_LIB([SDL_mixer],
		     [Mix_OpenAudio],
	    	 [SDL_MIXER_LIBS=-lSDL_mixer],
		     [AC_MSG_ERROR([*** SDL_mixer lib not found! Get SDL_mixer from
	http://www.libsdl.org/projects/SDL_mixer/index.html])])
fi	

AC_CHECK_LIB([physfs],
             [PHYSFS_init],
             [PHYSFS_LIBS="-lphysfs"],
             [AC_MSG_ERROR([PhysicsFS lib not found! Get PhysicsFS from http://icculus.org/physfs/])])
	     
AC_CHECK_LIB(curl, curl_global_init,
	[CURL_LIBS="-lcurl"], [
	echo "*"
	echo "*  libcurl is needed to build this library. It is either not"
	echo "*  installed on your system or it is too old."
	echo "*  Please install or update your libcurl-devel or visit http://curl.haxx.se/"
	echo "*"
	AC_MSG_ERROR("Cannot build. Stop.")], -lcurl)
LIBS=$OLD_LIBS

AC_SUBST([SDL_LIBS])
AC_SUBST([SDL_IMAGE_LIBS])
AC_SUBST([SDL_MIXER_LIBS])
AC_SUBST([CURL_LIBS])

# Check for SDL headers

OLD_CPPFLAGS=$CPPFLAGS
OLD_CXXFLAGS=$CXXFLAGS

SDL_CFLAGS=`$SDL_CONFIG --cflags`
SDL_CFLAGS="$SDL_CFLAGS"
CPPFLAGS="$CPPFLAGS $SDL_CFLAGS"
CXXFLAGS="$CXXFLAGS $SDL_CFLAGS"

AC_CHECK_HEADER([SDL.h],
		[],
		[AC_MSG_ERROR([*** SDL include files not found!
You should install SDL development package.])])

AC_CHECK_HEADER([SDL_image.h],
		[],
		[AC_MSG_ERROR([*** SDL_image include files not found!
You should install the development package.])])
		
if test "x$sound" = "xyes" ; then
	AC_CHECK_HEADER([SDL_mixer.h],
			[],
			[AC_MSG_ERROR([*** SDL_mixer include files not found!
	You should install the development package.
	Or run ./configure --disable-sound])])
fi	

AC_CHECK_HEADER([physfs.h],
               [],
               [AC_MSG_ERROR([*** PhysicsFS include not found!
You should install PhysicsFS development package.])])

		
CPPFLAGS=$OLD_CPPFLAGS
CXXFLAGS=$OLD_CXXFLAGS

AC_SUBST([SDL_CFLAGS])

# Check for PNG support in SDL_image (some distros (BSD?) may miss this)

AC_MSG_CHECKING([for PNG support in SDL_image])

OLD_CPPFLAGS=$CPPFLAGS
OLD_CXXFLAGS=$CXXFLAGS
OLD_LIBS=$LIBS

CPPFLAGS="$CPPFLAGS $SDL_CFLAGS"
CXXFLAGS="$CXXFLAGS $SDL_CFLAGS"
LIBS="$LIBS $SDL_IMAGE_LIBS $SDL_LIBS $EXTRA_LIBS"

AC_RUN_IFELSE([AC_LANG_SOURCE([
#include <SDL_image.h>
#include <stdlib.h>

int main(int argc, char **argv)
{
	SDL_RWops *src;

	src = SDL_RWFromFile("test.png", "rb");
	if (src == NULL)
		exit(1);
	exit(!IMG_isPNG(src));
}
	])],
	[AC_MSG_RESULT(yes)],
	[AC_MSG_RESULT(no)] 
    [AC_MSG_ERROR([*** SDL_image has no PNG support! 
	You need SDL_image with PNG support])],
	[AC_MSG_RESULT([not tested in cross-compiling])])

CPPFLAGS=$OLD_CPPFLAGS
CXXFLAGS=$OLD_CXXFLAGS
LIBS=$OLD_LIBS

# Check for OGG support in SDL_mixer

if test "x$sound" = "xyes" ; then
	AC_MSG_CHECKING([for OGG support in SDL_mixer])

	OLD_CPPFLAGS=$CPPFLAGS
	OLD_CXXFLAGS=$CXXFLAGS
	OLD_LIBS=$LIBS

	CPPFLAGS="$CPPFLAGS $SDL_CFLAGS"
	CXXFLAGS="$CXXFLAGS $SDL_CFLAGS"
	LIBS="$LIBS $SDL_MIXER_LIBS $SDL_LIBS $EXTRA_LIBS"

	AC_RUN_IFELSE([AC_LANG_SOURCE([
	#include <SDL_mixer.h>
	#include <stdlib.h>

	int main(int argc, char **argv)
	{
		char *music;
	
		music = (char *) Mix_LoadMUS("../../media/orchestral.ogg");
		if (music == NULL)
			exit(1);
		exit(0);
	}
		])],
		[AC_MSG_RESULT(yes)],
		[AC_MSG_RESULT(no)]
		[AC_MSG_ERROR([*** SDL_mixer has no OGG support! 
        You need SDL_mixer with OGG support,
        or run ./configure --disable-sound])],
		[AC_MSG_RESULT([not tested in cross-compiling])])

	CPPFLAGS=$OLD_CPPFLAGS
	CXXFLAGS=$OLD_CXXFLAGS
	LIBS=$OLD_LIBS
fi

# end of SDL config
#

# Test CPU & compiler characteristics
AC_C_BIGENDIAN(
    [endianness="big"]
	[AC_DEFINE(WORDS_BIGENDIAN, 1, [ CPU uses big-endian words ])],
    [endianness="little"]
	[AC_DEFINE(WORDS_LITTLEENDIAN, 1, [ CPU uses little-endian words ])],
    [endianness="unknown"])
AC_CHECK_SIZEOF(int *)
cpubits=`expr $ac_cv_sizeof_int_p \* 8`

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_CHECK_TYPES([ptrdiff_t])

# Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_SELECT_ARGTYPES
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([atexit gethostbyname memset modf select socket strcasecmp strchr strerror strncasecmp strrchr strstr strtoul stricmp strnicmp getpwuid])

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([arpa/inet.h fcntl.h limits.h malloc.h netdb.h netinet/in.h stddef.h stdlib.h string.h sys/socket.h sys/time.h unistd.h pwd.h])

#if test "x$prefix" != xNONE; then
#   AC_DEFINE_UNQUOTED(PREFIX, "${prefix}", [Installation prefix])
#else
#   AC_DEFINE_UNQUOTED(PREFIX, "${ac_default_prefix}", [Installation prefix])
#fi

#
# Check for stuff needed by the auto-updater
#

if test "x$simplelayout" = "xyes"; then
#    build_xdelta="no"
    
#    AC_PATH_PROG(BUNZIP2, bunzip2)
#    AC_PATH_PROG(MD5SUM, md5sum)
#    AC_PATH_PROG(WGET, wget)
#    AC_PATH_PROG(TAR, tar)
#    AC_PATH_PROG(XDELTA, xdelta)

    missing_binaries=""
#    if test "x$BUNZIP2" = "x"; then 
#        missing_binaries="${missing_binaries}bunzip2 "
#    fi
#    if test "x$MD5SUM" = "x"; then 
#        missing_binaries="${missing_binaries}md5sum "
#    fi
#    if test "x$WGET" = "x"; then 
#        missing_binaries="${missing_binaries}wget "
#    fi
#    if test "x$TAR" = "x"; then 
#        missing_binaries="${missing_binaries}tar "
#    fi
    
    # TODO: build xdelta from tarball or embed into autoupdater
#    if test "x$XDELTA" = "x"; then 
#        missing_binaries="${missing_binaries}xdelta "
#    fi

    if test "x$missing_binaries" != "x"; then
        autoupdater="disabled (missing tool(s): $missing_binaries)"
    else
        autoupdater="disabled (not finished yet)"
    fi        
else
    autoupdater="disabled (only for simple directory layout)"
fi

AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(EXTRA_LIBS)
AC_SUBST(PHYSFS_LIBS)
AC_SUBST(CURL_LIBS)

AC_CONFIG_HEADER(../../src/include/define.h)
AC_OUTPUT(Makefile)

# No, we don't support this yet. Effected are mostly OS X and Solaris.
if test "x$endianness" != "xlittle" ; then
	echo
	echo "*** WARNING:"
	echo " Your CPU was detected as being $endianness-endian. This is currently not"
	echo " supported very well by Daimonin. Proceed with caution."
	echo " Also please report your results to www.daimonin.org/bugtracker"
	echo
fi	

# No, we don't support this yet. Effected are mostly OS X and Solaris.
if test "x$cpubits" != "x32" -a "x$cpubits" != "x64" ; then
	echo
	echo "*** WARNING:"
	echo " Your CPU was detected as being $cpubits-bit. This is currently not"
	echo " supported very well by Daimonin. Proceed with caution."
	echo " Also please report your results to www.daimonin.org/bugtracker"
	echo
fi	

# Write out setup information
echo
echo "** Setup information:"
echo "  Installation path:       $prefix"
echo "  Simple directory layout: $simplelayout"
echo "  Auto-updater:            $autoupdater"
